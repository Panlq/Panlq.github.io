<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Pan Blog</title>
  
  <subtitle>You had me at hello</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://plq.91sq.cc/"/>
  <updated>2019-03-28T12:09:42.556Z</updated>
  <id>http://plq.91sq.cc/</id>
  
  <author>
    <name>Mr.Pan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>斐波那契数列的5种python写法</title>
    <link href="http://plq.91sq.cc/2018/07/13/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%845%E7%A7%8Dpython%E5%86%99%E6%B3%95/"/>
    <id>http://plq.91sq.cc/2018/07/13/斐波那契数列的5种python写法/</id>
    <published>2018-07-13T10:57:07.000Z</published>
    <updated>2019-03-28T12:09:42.556Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家<strong>列昂纳多·斐波那契</strong>（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）</p><a id="more"></a><p><img src="/assets/blogimg/fibonacci1.jpg" alt=""></p><blockquote><p>斐波那契数列，难点在于算法，还有如果变成生成器，generator，就要用for循环去遍历可迭代的generator  </p></blockquote><h4 id="第一种递归法"><a href="#第一种递归法" class="headerlink" title="第一种递归法"></a>第一种递归法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_recur</span><span class="params">(n)</span>:</span></span><br><span class="line">  <span class="keyword">assert</span> n &gt;= <span class="number">0</span>, <span class="string">"n &gt; 0"</span></span><br><span class="line">  <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  <span class="keyword">return</span> fib_recur(n<span class="number">-1</span>) + fib_recur(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">    print(fib_recur(i), end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><blockquote><p>写法最简洁，但是效率最低，会出现大量的重复计算，时间复杂度O（1.618^n）,而且最深度1000  </p></blockquote><h4 id="第二种递推法"><a href="#第二种递推法" class="headerlink" title="第二种递推法"></a>第二种递推法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_loop</span><span class="params">(n)</span>:</span></span><br><span class="line">  a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>):</span><br><span class="line">    a, b = b, a+b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">  print(fib_loop(i), end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><blockquote><p>递推法，就是递增法，时间复杂度是 O(n)，呈线性增长，如果数据量巨大，速度会越拖越慢  </p></blockquote><h4 id="第三种生成器"><a href="#第三种生成器" class="headerlink" title="第三种生成器"></a>第三种生成器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_loop_while</span><span class="params">(max)</span>:</span></span><br><span class="line">  a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> max &gt; <span class="number">0</span>:</span><br><span class="line">    a, b = b, a+b</span><br><span class="line">    max -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fib(<span class="number">10</span>):</span><br><span class="line">    print(i, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><blockquote><p>带有yield的函数都被看成生成器，生成器是可迭代对象，且具备__iter__ 和 __next__方法， 可以遍历获取元素</p></blockquote><h4 id="第四种类实现内部魔法方法"><a href="#第四种类实现内部魔法方法" class="headerlink" title="第四种类实现内部魔法方法"></a>第四种类实现内部魔法方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        self.num = num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.num &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> self.num &gt; <span class="number">0</span>:</span><br><span class="line">            a, b = a + b, a</span><br><span class="line">            self.num -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__iter__()</span><br><span class="line"></span><br><span class="line">f = Fibonacci(<span class="number">15</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">  print(i)</span><br></pre></td></tr></table></figure><h4 id="第五种-矩阵"><a href="#第五种-矩阵" class="headerlink" title="第五种-矩阵"></a>第五种-矩阵</h4><p><img src="/assets/blogimg/fibonacci2.png" alt=""><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 1</span></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_matrix</span><span class="params">(n)</span>:</span></span><br><span class="line">    res = pow((numpy.matrix([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>]])), n) * numpy.matrix([[<span class="number">1</span>], [<span class="number">0</span>]])</span><br><span class="line">    <span class="keyword">return</span> res[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    print(int(fib_matrix(i)), end=<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 2</span></span><br><span class="line"><span class="comment"># 使用矩阵计算斐波那契数列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fibonacci_Matrix_tool</span><span class="params">(n)</span>:</span></span><br><span class="line">    Matrix = npmpy.matrix(<span class="string">"1 1;1 0"</span>)</span><br><span class="line">    <span class="comment"># 返回是matrix类型</span></span><br><span class="line">    <span class="keyword">return</span> pow(Matrix, n)  <span class="comment"># pow函数速度快于 使用双星好 **</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fibonacci_Matrix</span><span class="params">(n)</span>:</span></span><br><span class="line">    result_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">        result_list.append(numpy.array(Fibonacci_Matrix_tool(i))[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> result_list</span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">Fibonacci_Matrix(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>因为幂运算可以使用二分加速，所以矩阵法的时间复杂度为 O(log n)<br>用科学计算包numpy来实现矩阵法 O(log n)</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家&lt;strong&gt;列昂纳多·斐波那契&lt;/strong&gt;（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&amp;gt;=2，n∈N*）&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://plq.91sq.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="python" scheme="http://plq.91sq.cc/tags/python/"/>
    
      <category term="面试题" scheme="http://plq.91sq.cc/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>异步协程模块async&amp;aiohttp学习</title>
    <link href="http://plq.91sq.cc/2018/07/09/%E5%BC%82%E6%AD%A5%E5%8D%8F%E7%A8%8B%E6%A8%A1%E5%9D%97async-aiohttp%E5%AD%A6%E4%B9%A0/"/>
    <id>http://plq.91sq.cc/2018/07/09/异步协程模块async-aiohttp学习/</id>
    <published>2018-07-09T15:17:56.000Z</published>
    <updated>2019-03-28T12:07:17.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异步爬虫：async-await-与aiohttp学习"><a href="#异步爬虫：async-await-与aiohttp学习" class="headerlink" title="异步爬虫：async/await 与aiohttp学习"></a>异步爬虫：async/await 与aiohttp学习</h2><blockquote><p>python自带asyncio,asyncio的编程模型就是一个消息循环。<br> 我们从asyncio模块中直接获取一个EventLoop的引用，<br> 然后把需要执行的协程扔到EventLoop中执行，就实现了异步IO</p></blockquote><a id="more"></a><p><img src="/assets/blogimg/asyncio.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="comment"># @asyncio.coroutine把一个generator标记为coroutine类型</span></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello world! (%s)"</span> % threading.currentThread())</span><br><span class="line">    <span class="comment"># 异步调用asyncio.sleep(1) # asyncio.sleep(1)也是一个coroutine，就是一个i/o耗时操作</span></span><br><span class="line">    r = <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># print(r)</span></span><br><span class="line">    print(<span class="string">"Hello world! (%s)"</span> % threading.currentThread())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取EventLoop,事件队列</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 添加任务列表</span></span><br><span class="line">tasks = [hello(), hello()]</span><br><span class="line"><span class="comment"># 执行coroutine</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><h3 id="新语法-python3-5-async-await"><a href="#新语法-python3-5-async-await" class="headerlink" title="新语法(python3.5+,async/await)"></a>新语法(python3.5+,async/await)</h3><blockquote><p>只支持python3.5以上版本<br>把@asyncio.coroutine替换为async；把yield from替换为await  </p></blockquote><ul><li>async 跟@asyncio.coroutine用法一样就是说明这个函数是一个coroutine</li><li>await 就是调用另一个协程</li><li>python3.6中，可以直接用yield来调用一个函数，表示协程  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"新语法写法：Hello World"</span>)</span><br><span class="line">    <span class="comment"># asyncio.sleep(1)也是一个coroutine，就是一个i/o耗时操作</span></span><br><span class="line">    r = <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"新语法写法：Hello again"</span>)</span><br></pre></td></tr></table></figure><h3 id="使用session获取数据，session可以进行多项操作，比如post-get-put-option等等"><a href="#使用session获取数据，session可以进行多项操作，比如post-get-put-option等等" class="headerlink" title="使用session获取数据，session可以进行多项操作，比如post, get, put, option等等"></a>使用session获取数据，session可以进行多项操作，比如post, get, put, option等等</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;<span class="string">'content-type'</span>: <span class="string">'application/json'</span>&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">__fetch2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        proxy_auth = aiohttp.BasicAuth(<span class="string">'user'</span>, <span class="string">'pass'</span>)</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(<span class="string">'http://httpbin.org'</span>,</span><br><span class="line">                               headers=headers,</span><br><span class="line">                               proxy=<span class="string">"http://proxy.com"</span>,</span><br><span class="line">                               proxy_auth=proxy_auth) <span class="keyword">as</span> resp:</span><br><span class="line">            <span class="comment"># 另一种写法</span></span><br><span class="line">            <span class="comment"># proxy = "http://user:pass@some.proxy.com"</span></span><br><span class="line">            print(resp.status)</span><br><span class="line">            print(<span class="keyword">await</span> resp.text())</span><br></pre></td></tr></table></figure><h3 id="aiohttp客户端"><a href="#aiohttp客户端" class="headerlink" title="aiohttp客户端"></a>aiohttp客户端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line">URL = <span class="string">"http://www.httpbin.org/get"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(session)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(URL) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(loop=loop) <span class="keyword">as</span> session:  <span class="comment"># 官网推荐建立session形式</span></span><br><span class="line">        <span class="comment"># 创建多任务</span></span><br><span class="line">        tasks = [loop.create_task(fetch(session)) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">        finished, unfinished = <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line">        all_results = [r.result() <span class="keyword">for</span> r <span class="keyword">in</span> finished]</span><br><span class="line">        print(len(all_results))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(main(loop))</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure><h3 id="aiohttp服务器"><a href="#aiohttp服务器" class="headerlink" title="aiohttp服务器,"></a>aiohttp服务器,</h3><blockquote><p>aiohttp服务器也是一个轻便的服务器框架，asyncio实现了TCP、UDP、SSL等协议，aiohttp则是基于asyncio实现的HTTP框架<br>asyncio可以实现单线程并发IO操作。如果仅用在客户端，发挥的威力不大。如果把asyncio用在服务器端，例如Web服务器，由于HTTP连接就是IO操作，因此可以用单线程+coroutine实现多用户的高并发支持。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(request)</span>:</span></span><br><span class="line">    name = request.match_info.get(<span class="string">'name'</span>, <span class="string">"Anonymous"</span>)</span><br><span class="line">    text = <span class="string">"Hello, "</span> + name</span><br><span class="line">    <span class="keyword">return</span> web.Response(text=text)</span><br><span class="line"></span><br><span class="line">app = web.Application(debug=<span class="keyword">True</span>)</span><br><span class="line">app.add_routes([web.get(<span class="string">'/'</span>, handle),</span><br><span class="line">                web.get(<span class="string">'/&#123;name&#125;'</span>, handle)])</span><br><span class="line"></span><br><span class="line">web.run_app(app, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><h4 id="可学习的写法，"><a href="#可学习的写法，" class="headerlink" title="可学习的写法，"></a>可学习的写法，</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 可学习的写法，</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">parseListPage</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_str)</span>:</span></span><br><span class="line">        self.page_str = page_str</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        page_str = self.page_str</span><br><span class="line">        page = bs(page_str,<span class="string">'lxml'</span>)</span><br><span class="line">        <span class="comment"># 获取文章链接</span></span><br><span class="line">        articles = page.find_all(<span class="string">'div'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'article_title'</span>&#125;)</span><br><span class="line">        art_urls = []</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> articles:</span><br><span class="line">            x = a.find(<span class="string">'a'</span>)[<span class="string">'href'</span>]</span><br><span class="line">            art_urls.append(<span class="string">'http://blog.csdn.net'</span>+x)</span><br><span class="line">        <span class="keyword">return</span> art_urls</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> parseListPage(ret) <span class="keyword">as</span> tmp:</span><br><span class="line">        articles_url += tmp</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://aiohttp.readthedocs.io" target="_blank" rel="noopener">官方文档</a><br><a href="https://blog.csdn.net/u014595019/article/details/52295642/" target="_blank" rel="noopener">multiangle大佬</a><br><a href="www.liaoxuefeng.com">www.liaoxuefeng.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;异步爬虫：async-await-与aiohttp学习&quot;&gt;&lt;a href=&quot;#异步爬虫：async-await-与aiohttp学习&quot; class=&quot;headerlink&quot; title=&quot;异步爬虫：async/await 与aiohttp学习&quot;&gt;&lt;/a&gt;异步爬虫：async/await 与aiohttp学习&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;python自带asyncio,asyncio的编程模型就是一个消息循环。&lt;br&gt; 我们从asyncio模块中直接获取一个EventLoop的引用，&lt;br&gt; 然后把需要执行的协程扔到EventLoop中执行，就实现了异步IO&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python学习" scheme="http://plq.91sq.cc/categories/python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="asyncio" scheme="http://plq.91sq.cc/tags/asyncio/"/>
    
  </entry>
  
  <entry>
    <title>PIL模块学习-强大的图像处理包</title>
    <link href="http://plq.91sq.cc/2018/07/01/PIL%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0-%E5%BC%BA%E5%A4%A7%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8C%85/"/>
    <id>http://plq.91sq.cc/2018/07/01/PIL模块学习-强大的图像处理包/</id>
    <published>2018-07-01T12:43:47.000Z</published>
    <updated>2019-03-28T12:09:17.392Z</updated>
    
    <content type="html"><![CDATA[<p>PIL: python imaging library, 强大的图像处理包，api简单易用, PIL仅支持到Python 2.7, python3 直接安装pillow（后来由一群志愿者整合的兼容包）</p><a id="more"></a><blockquote><p>pip3 install pillow    </p></blockquote><p>接口使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.读取图片 传入文件路径，文件名</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.open(<span class="string">'filename'</span>)</span><br><span class="line">im = Image.open(<span class="string">'/Users/michael/test.jpg'</span>)</span><br><span class="line"><span class="comment"># 2.获得图像尺寸:</span></span><br><span class="line">w, h = im.size</span><br><span class="line"><span class="comment"># 缩放到50%</span></span><br><span class="line">im.thumbnail((w//<span class="number">2</span>, h//<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 3.显示图片</span></span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.保存图片</span></span><br><span class="line"><span class="comment"># 保存图像为gif格式,等</span></span><br><span class="line">im.save(<span class="string">'save.gif'</span>, <span class="string">"GIF"</span>)</span><br><span class="line">im.save(<span class="string">'save.gif'</span>, <span class="string">"JPG"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5 图片裁剪功能</span></span><br><span class="line"><span class="comment"># 设置图片裁剪区域</span></span><br><span class="line">box = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line"><span class="comment"># 注意传入的是一个元组，im对象的很多api方法都是传入元组的</span></span><br><span class="line">region = im.crop(box)   <span class="comment"># 返回一个新的图像对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 图像黏贴（合并</span></span><br><span class="line">im.paste(region, box)  <span class="comment">#粘贴box大小的region到原先的图片对象中</span></span><br></pre></td></tr></table></figure><p>其他功能如切片、旋转、滤镜、输出文字、调色板等一应俱全<br>模糊效果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFilter</span><br><span class="line"><span class="comment"># 打开一个jpg图像文件，注意是当前路径:</span></span><br><span class="line">im = Image.open(<span class="string">'test.jpg'</span>)</span><br><span class="line"><span class="comment"># 应用模糊滤镜:</span></span><br><span class="line">im2 = im.filter(ImageFilter.BLUR)</span><br><span class="line">im2.save(<span class="string">'blur.jpg'</span>, <span class="string">'jpeg'</span>)</span><br></pre></td></tr></table></figure></p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001407671964310a6b503be6fcb4648928e2e4c522d04c7000" alt=""></p><p>参考：<a href="www.liaoxuefeng.com">廖雪峰的官方网站</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PIL: python imaging library, 强大的图像处理包，api简单易用, PIL仅支持到Python 2.7, python3 直接安装pillow（后来由一群志愿者整合的兼容包）&lt;/p&gt;
    
    </summary>
    
    
      <category term="python模块" scheme="http://plq.91sq.cc/tags/python%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>python对excel表格的操作(xlwt,xlrd)</title>
    <link href="http://plq.91sq.cc/2018/05/31/python%E5%AF%B9excel%E8%A1%A8%E6%A0%BC%E7%9A%84%E6%93%8D%E4%BD%9C-xlwt-xlrd/"/>
    <id>http://plq.91sq.cc/2018/05/31/python对excel表格的操作-xlwt-xlrd/</id>
    <published>2018-05-31T05:16:02.000Z</published>
    <updated>2019-03-28T12:09:26.885Z</updated>
    
    <content type="html"><![CDATA[<h4 id="xlrd模块的基本使用："><a href="#xlrd模块的基本使用：" class="headerlink" title="xlrd模块的基本使用："></a>xlrd模块的基本使用：</h4><p>从excel表格中读取数据<br>打开文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">r"C:\Users\asus\Downloads\test.xlsx"</span>)</span><br></pre></td></tr></table></figure></p><p>常规查看操作命令</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表格对象</span></span><br><span class="line">sheet1 = workbook.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># sheet1 = workbook.sheet_by_name("sheet1")</span></span><br><span class="line"><span class="comment"># 获取整行和整列的值</span></span><br><span class="line">rows = sheet1.row_values(<span class="number">1</span>)  <span class="comment"># 第一行</span></span><br><span class="line">cols = sheet1.col_values(<span class="number">2</span>)  <span class="comment"># 第二列值</span></span><br><span class="line"><span class="comment"># 获取第一行，第0列的单元格的内容</span></span><br><span class="line">sheet1.cell(<span class="number">1</span>,<span class="number">0</span>).value</span><br><span class="line"><span class="comment"># 获取指定单元格内容的数据类型：</span></span><br><span class="line">sheet1.cell(<span class="number">1</span>, <span class="number">0</span>).ctype</span><br></pre></td></tr></table></figure><p>单元格内容的数据类型：<br>ctype:  </p><table><thead><tr><th style="text-align:center">数值</th><th>0</th><th style="text-align:center">1</th><th>2</th><th style="text-align:center">3</th><th>4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">对应的类型</td><td>empty</td><td style="text-align:center">string</td><td>number</td><td style="text-align:center">date</td><td>boolean</td><td style="text-align:center">error</td></tr></tbody></table><p>获取单元内容为日期类型的方式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,date</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet2.cell(<span class="number">1</span>,<span class="number">2</span>).ctype</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet2.cell(<span class="number">1</span>,<span class="number">2</span>).value</span><br><span class="line"><span class="number">42129.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xlrd.xldate_as_tuple(sheet2.cell_value(<span class="number">1</span>,<span class="number">2</span>),workbook.datemode)</span><br><span class="line">(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date_value = xlrd.xldate_as_tuple(sheet2.cell_value(<span class="number">1</span>,<span class="number">2</span>),workbook.datemode)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date(*date_value[:<span class="number">3</span>])</span><br><span class="line">datetime.date(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date(*date_value[:<span class="number">3</span>]).strftime(<span class="string">'%Y/%m/%d'</span>)</span><br><span class="line"><span class="string">'2015/05/05'</span></span><br></pre></td></tr></table></figure><blockquote><p>在python脚本中可以用条件判断：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (sheet.cell(row,col).ctype == <span class="number">3</span>):</span><br><span class="line">date_value = xlrd.xldate_as_tuple(sheet.cell_value(row,col),workbook.datemode)</span><br><span class="line">date_tmp = date(*date_value[:<span class="number">3</span>]).strftime(<span class="string">'%Y/%m/%d'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="写入文件模块-xlwt"><a href="#写入文件模块-xlwt" class="headerlink" title="写入文件模块 xlwt"></a>写入文件模块 xlwt</h4><p>模板格式：<br><img src="/assets/blogimg/xlwt.png" alt=""><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">sheet1.write(第几行， 第几列， 值， 值的格式)</span></span><br><span class="line"><span class="string">write_merge(x, x + m, y, w+n, string, style)</span></span><br><span class="line"><span class="string">x表示行，y表示列，m表示跨行个数，n表示跨列个数，</span></span><br><span class="line"><span class="string">string表示要写入的单元格内容，style表示单元格样式。其中，x，y，w，h，都是以0开始计算的</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置单元格样式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_style</span><span class="params">(name, height, bold=False)</span>:</span></span><br><span class="line">  style = xlwt.XFStyle()   <span class="comment"># 初始化样式</span></span><br><span class="line"></span><br><span class="line">  font = xlwt.Font()      <span class="comment"># 为样式创建字体,注意是一个对象</span></span><br><span class="line">  font.name = name</span><br><span class="line">  font.bold = bold</span><br><span class="line">  font.colour_index = <span class="number">4</span>   <span class="comment"># 颜色索引，对应的默认配置中的颜色</span></span><br><span class="line">  font.height = height    <span class="comment"># 字体高度，单位pt</span></span><br><span class="line">  style.font = font</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> style</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_excel</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="comment"># 创建工作簿</span></span><br><span class="line">  f = xlwt.Workbook()</span><br><span class="line">  <span class="string">'''</span></span><br><span class="line"><span class="string">    创建第一个sheet:</span></span><br><span class="line"><span class="string">      sheet1</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">  sheet1 = f.add_sheet(<span class="string">'sheet1'</span>, cell_overwrite_ok=<span class="keyword">True</span>)  <span class="comment"># 创建sheet</span></span><br><span class="line">  row0 = [<span class="string">'业务'</span>, <span class="string">'状态'</span>, <span class="string">'北京'</span>, <span class="string">'上海'</span>, <span class="string">'广州'</span>, <span class="string">'深圳'</span>, <span class="string">'状态小计'</span>, <span class="string">'合计'</span>]</span><br><span class="line">  column0 = [<span class="string">'机票'</span>, <span class="string">'船票'</span>, <span class="string">'火车票'</span>, <span class="string">'汽车票'</span>, <span class="string">'其它'</span>]</span><br><span class="line">  status = [<span class="string">'预订'</span>, <span class="string">'出票'</span>, <span class="string">'退票'</span>, <span class="string">'业务小计'</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 生成第一行  标题行</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(row0)):</span><br><span class="line">      sheet1.write(<span class="number">0</span>, i, row0[i], set_style(<span class="string">'Times New Roman'</span>, <span class="number">220</span>, <span class="keyword">True</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 生成第一列和最后一列(合并4列)</span></span><br><span class="line">  i, j = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; <span class="number">4</span>*len(column0) <span class="keyword">and</span> j &lt; len(column0):</span><br><span class="line">      <span class="comment"># write_merge()</span></span><br><span class="line">      sheet1.write_merge(i, i+<span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, column0[j], set_style(<span class="string">'Arial'</span>,<span class="number">220</span>,<span class="keyword">True</span>))</span><br><span class="line"></span><br><span class="line">      sheet1.write_merge(i, i+<span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>)  <span class="comment"># 最后一列</span></span><br><span class="line"></span><br><span class="line">      i += <span class="number">4</span></span><br><span class="line">      j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 在22行合并第1,2列，合并后的单元格内容为"合计"，并设置了style</span></span><br><span class="line">  sheet1.write_merge(<span class="number">21</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="string">"合计"</span>, set_style(<span class="string">'Times New Roman'</span>,<span class="number">220</span>,<span class="keyword">True</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 生成第二列</span></span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; <span class="number">4</span>*len(column0):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(status)):</span><br><span class="line">          sheet1.write(j+i+<span class="number">1</span>, <span class="number">1</span>, status[j])</span><br><span class="line">      i += <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 保存文件，记得写后缀</span></span><br><span class="line">  f.save(<span class="string">'demo.xls'</span>)</span><br><span class="line">  print(<span class="string">"创建完成"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  <span class="comment"># generate_workbook()</span></span><br><span class="line">  write_excel()</span><br></pre></td></tr></table></figure></p><p>参考文献：<br>参考：<a href="https://www.cnblogs.com/linyfeng/p/7123423.html" target="_blank" rel="noopener">https://www.cnblogs.com/linyfeng/p/7123423.html</a><br>官方文档：<a href="https://github.com/python-excel/xlwt" target="_blank" rel="noopener">https://github.com/python-excel/xlwt</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;xlrd模块的基本使用：&quot;&gt;&lt;a href=&quot;#xlrd模块的基本使用：&quot; class=&quot;headerlink&quot; title=&quot;xlrd模块的基本使用：&quot;&gt;&lt;/a&gt;xlrd模块的基本使用：&lt;/h4&gt;&lt;p&gt;从excel表格中读取数据&lt;br&gt;打开文件：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; xlrd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;workbook = xlrd.open_workbook(&lt;span class=&quot;string&quot;&gt;r&quot;C:\Users\asus\Downloads\test.xlsx&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;常规查看操作命令&lt;/p&gt;
    
    </summary>
    
      <category term="python学习" scheme="http://plq.91sq.cc/categories/python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python-excel" scheme="http://plq.91sq.cc/tags/python-excel/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://plq.91sq.cc/2018/05/27/hello-world/"/>
    <id>http://plq.91sq.cc/2018/05/27/hello-world/</id>
    <published>2018-05-27T13:53:27.455Z</published>
    <updated>2018-05-31T05:44:28.968Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
